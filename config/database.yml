development: &development
  adapter: mysql2_makara
  encoding: utf8mb4
  collation: utf8mb4_unicode_ci
  database: <%= ENV.fetch("DATABASE_NAME") %>
  host: <%= ENV.fetch("DATABASE_HOST") %>
  port: <%= ENV.fetch("DATABASE_PORT") %>
  # Makara does not work well with Sidekiq's threaded model. We set the pool size to be more than the Sidekiq
  # concurrency so that Sidekiq jobs don't run out of Active Record connections to the database.
  # As of writing this, only Sidekiq workers set ENV["DB_POOL_SIZE"]. `ENV["RAILS_MAX_THREADS"].presence` is put in the
  # condition so that migrating to anything that uses the ENV var will require no changes to this file. (also a fallback)
  # If both the ENV vars are missing the pool size will evaluate to 5 (which is the Rails default in case you're
  # wondering).
  # See https://github.com/gumroad/infrastructure/issues/479 for more details.
  pool: <%= ENV["DB_POOL_SIZE"].presence || ENV["RAILS_MAX_THREADS"].presence || 5 %>
  <%= "reconnect: true" unless ENV["SKIP_NATIVE_MYSQL_RECONNECT"] == "true" %>
  socket: <%= [
  '/var/run/mysqld/mysqld.sock',
  '/var/lib/mysql/mysql.sock',
  '/tmp/mysqld.sock',
  '/tmp/mysql.sock'].detect { |socket| File.exist?(socket) } %>
  username: <%= ENV.fetch("DATABASE_USERNAME") %>
  password: <%= ENV.fetch("DATABASE_PASSWORD", "") %>
  variables:
    max_execution_time: <%= 5 * 60000 %> # 5 minutes
    sql_mode: 'NO_ENGINE_SUBSTITUTION'

  makara:
    id: mysql
    connections:
      - role: primary
        host: <%= ENV.fetch("DATABASE_HOST") %>
        name: primary
      <% if ENV["USE_DB_WORKER_REPLICAS"] == "true" %>
      - role: replica
        host: <%= ENV.fetch("DATABASE_HOST") %>
        name: Worker Replica 1
      <% end %>

test:
  <<: *development
  database: <%= ENV.fetch("TEST_DATABASE_NAME", "gumroad_test") %>

staging: &staging
  <<: *development

  makara:
    id: mysql
    connections:
      - role: primary
        host: <%= ENV.fetch("DATABASE_HOST") %>
        name: primary
      <% if ENV["USE_DB_WORKER_REPLICAS"] == "true" %>
      - role: replica
        database: <%= ENV["DATABASE_REPLICA2_NAME"] %>
        username: <%= ENV["DATABASE_REPLICA2_USERNAME"] %>
        password: <%= ENV["DATABASE_REPLICA2_PASSWORD"] %>
        host: <%= ENV["DATABASE_REPLICA2_HOST"] %>
        name: Worker Replica 1
      <% end %>

production:
  <<: *staging

  makara:
    id: mysql
    connections:
      - role: primary
        host: <%= ENV.fetch("DATABASE_HOST") %>
        name: primary
      <% if ENV["USE_DB_WORKER_REPLICAS"] == "true" %>
      - role: replica
        database: <%= ENV["DATABASE_WORKER_REPLICA1_NAME"] %>
        username: <%= ENV["DATABASE_WORKER_REPLICA1_USERNAME"] %>
        password: <%= ENV["DATABASE_WORKER_REPLICA1_PASSWORD"] %>
        host: <%= ENV["DATABASE_WORKER_REPLICA1_HOST"] %>
        name: Worker Replica 1
      - role: replica
        database: <%= ENV["DATABASE_WORKER_REPLICA2_NAME"] %>
        username: <%= ENV["DATABASE_WORKER_REPLICA2_USERNAME"] %>
        password: <%= ENV["DATABASE_WORKER_REPLICA2_PASSWORD"] %>
        host: <%= ENV["DATABASE_WORKER_REPLICA2_HOST"] %>
        name: Worker Replica 2
      <% end %>
